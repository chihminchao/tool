#!/bin/bash
#
# Hook used to indent *.cpp *.c *.h before commiting
#
INDENT="$(git config hooks.indent)"
if test ! -x "$INDENT"
then
    echo "Unable to find indent executable on the configuration."
    echo
    echo "Please configure it with :"
    echo "  git config hooks.indent C:/path/to/indent"
    echo
else
    INDENT_VERSION=`$INDENT --version 2>&1 | cut -f 4 -d ' ' | cut -c 1`
    if [ x$INDENT_VERSION = x"1" ]; then
        INDENT_ARGUMENT="--style=allman --indent=spaces=4 --pad-oper --brackets=break --suffix=none --quiet"
    elif [ x$INDENT_VERSION = x"2" ]; then
        INDNET_ARGUMENT="--style=allman --indent=spaces=4 --indent-col1-comments --pad-oper --pad-header --add-brackets --suffix=none --quiet"
    else
        INDENT=""
    fi
fi

# indent / format file by type
indent() {
    # getting against as the current commit
    if git rev-parse --verify HEAD >/dev/null 2>&1
    then
        local against=HEAD
    else
        # Initial commit: diff against an empty tree object
        local against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
    fi

    # loop on modified files
    git diff --cached --name-only $against |while read file;
    do
        local ext=$(expr "$file" : ".*\(\..*\)")
        case $ext in
        .h)
            __indent_C;
        ;;
        .c)
            __indent_C;
        ;;
        .hxx)
            __indent_C;
        ;;
        .cpp)
            __indent_C;
        ;;
        esac
    done
}

# Indent the file with `indent' if this is a C/CPP file
__indent_C() {

    if test ! -x "$INDENT"
    then
        return;
    fi
    if test ! -f $file
    then
        return;
    fi

    echo "Indenting " $file
    $INDENT $INDENT_ARGUMENT $file
    git add "$file"
}

indent
