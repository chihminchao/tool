#!/usr/bin/env python

""" cross-compiler setup tool """
import argparse
import json
import os
import re
import subprocess
import sys
import tempfile

def find_xtool_bin(path):
    """ find target name, gcc/gdb/readelf path for specific xtool dir """

    pattern = {"^a.*-.*-gcc$" : 'gcc',
               "^a.*-.*-gdb$" : 'gdb',
               "^a.*-.*-readelf$" : 'binutil'}
    ret = dict()
    prefix = ""

    for root, _, names in os.walk(path + "/bin"):
        for filename in names:
            for item in pattern.keys():
                if re.match(item, filename):
                    ret[pattern[item]] = {"path" : os.path.join(root, filename)}
                    if not prefix:
                        what = re.match(r'(a.*-.*-.*)-(\w*)', filename)
                        ret['target'] = what.group(1)

    if not ret:
        raise Exception('File not found')
    else:
        return ret


def find_xtool_info(xtool):
    """ find gcc/gdb/binutil verision information """

    #gcc
    try:
        xtool['vendor'] = "None"
        xtool['gcc']['version'] = "None"
        xtool['gcc']['abi'] = "None"
        xtool['gcc']['cpu'] = "None"
        xtool['gcc']['fpu'] = "None"

        rmsg = subprocess.Popen([xtool['gcc']['path'], "-v"], stderr=subprocess.PIPE)
        info = rmsg.communicate()[1].rstrip('\n').split('\n')

        version_info = info[-1]
        for line in info:
            if line.find("--build") > 0:
                build_info = line
                break

        what = re.match(r"gcc version ([\w\.]+) (.+)", version_info)
        xtool['vendor'] = what.group(2)
        xtool['gcc']['version'] = what.group(1)

        what = re.match(r".+ --with-float=(\w+)", build_info)
        if what:
            xtool['gcc']['abi'] = what.group(1)

        what = re.match(r".+ --with-cpu=(\w+)", build_info)
        if what:
            xtool['gcc']['cpu'] = what.group(1)

        what = re.match(r".+ --with-fpu=(\w+)", build_info)
        if what:
            xtool['gcc']['fpu'] = what.group(1)

    except Exception:
        pass


    #binutil
    try:
        xtool['binutil']['version'] = "None"

        rmsg1 = subprocess.Popen([xtool['binutil']['path'], "-v"], stdout=subprocess.PIPE)
        rmsg2 = subprocess.Popen(["head", "-1"], stdin=rmsg1.stdout, stdout=subprocess.PIPE)
        rmsg1.stdout.close()

        version = rmsg2.communicate()[0].rstrip('\n')
        what = re.match("(.+) (.+)$", version)

        xtool['binutil']['version'] = what.group(2)
    except Exception:
        pass


    #gdb
    try:
        if not 'gdb' in xtool:
            xtool['gdb'] = dict()

        xtool['gdb']['version'] = "None"

        rmsg1 = subprocess.Popen([xtool['gdb']['path'], "-v"], stdout=subprocess.PIPE)
        rmsg2 = subprocess.Popen(["head", "-1"], stdin=rmsg1.stdout, stdout=subprocess.PIPE)
        rmsg1.stdout.close()

        version = rmsg2.communicate()[0].rstrip('\n')
        what = re.match("(.+) (.+)$", version)

        xtool['gdb']['version'] = what.group(2)
    except Exception:
        pass


def show_xtool_info(xtools):
    """ search gcc/gdb information in each cross compiler folder """
    prefix_len  = max([len(item['target'])             for item in xtools.values()])
    gcc_len     = max([len(item['gcc']['version'])     for item in xtools.values()])
    abi_len     = max([len(item['gcc']['abi'])         for item in xtools.values()])
    vendor_len  = max([len(item['vendor'])     for item in xtools.values()])

    cell_format = "%%s%%-3s%%-%ds%%-%ds%%-%ds%%-%ds" % (
                            prefix_len + 1,
                            gcc_len + 1,
                            abi_len + 1,
                            vendor_len + 1)

    print cell_format % (" ", "", 'Target', 'gcc', "abi", "vendor")
    idx = 1
    for item in sorted(xtools.itervalues(), key=lambda x: x['gcc']['version']):
        if item['current']:
            cur_mark = "*"
        else:
            cur_mark = " "

        print cell_format % (cur_mark, idx,
                                  item['target'],
                                  item['gcc']['version'],
                                  item['gcc']['abi'],
                                  item['vendor'])
        idx += 1


def search_xtool(xtools_path):
    """  For each xtool,  get each information for gcc/gdb/binutils
    """
    xtools = dict()
    for item in xtools_path:
        try:
            xtools[item] = find_xtool_bin(item)
        except Exception:
            print 'ignore : ' + item
            continue

        find_xtool_info(xtools[item])

    # find and setup current xtool path
    arm_path = os.getenv('ARM_TOOLPATH')
    aarch64_path = os.getenv('AARCH64_TOOLPATH')
    for item in xtools.keys():
        if arm_path and arm_path == item:
            xtools[item]['current'] = True
        elif aarch64_path and aarch64_path == item:
            xtools[item]['current'] = True
        else:
            xtools[item]['current'] = False

    return xtools


def get_choice(xtools):
    " Get integer input from prompt. 'q' for leave "

    while True:
        try:
            choice = raw_input("Choice [q for quit] : ")
            if choice == 'q':
                choice = 0
                break
            elif choice.isalnum() and 1 <= int(choice) <= len(xtools):
                break
            else:
                pass

        except ValueError:
            pass

    return int(choice)


def parse_argv():
    """ parse command line argument """
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
            description=("cross toolchain setup tool\n"
                         "The tool search config in the following order\n"
                         "    1. $XTOOL_DIR\n"
                         "    2. $HOME/tool/x-tools\n"))

    parser.add_argument("-l", "--list",
                        action="store_true", dest="listall", default=False,
                        help="List available toolchain version")
    parser.add_argument("-d", "--dry",
                        action="store_true", dest="dryrun", default=False,
                        help="Don't take an effect")
    parser.add_argument("-c", "--current",
                        action="store_true", dest="current", default=False,
                        help="Look up current tool version")
    parser.add_argument("-o", "--override",
                        action="store_true", dest="override", default=False,
                        help="Override global config for each new shell")
    parser.add_argument("-t", "--tmp",
                        action="store_false", dest="override",
                        help="Write path to tempory file, specified by config. "
                             "If the file doesn't exist, generate it")

    return parser.parse_args()

def setup_config(config=None):
    """ get and update information from tool folder to private configuration file
        if not existed, create a template
    """

    config_folder = "%s/.%s-tool" % (os.getenv('HOME'), os.getenv('USER'))
    config_file = "%s/config.json" % (config_folder)

    config_template = {"xtools" :
                        {"list_path": "/opt/config.json",
                         "arch": ["arm", "aarch64"],
                         "arm": {
                             "toolpath":  "",
                             "tmp": "",
                             "toollist": [],
                         },
                         "aarch64": {
                             "toolpath": "",
                             "tmp": "",
                             "toollist": []
                         }
                        }
                      }


    # update path
    if config:
        with open(config_file, "w") as handler:
            json.dump(config, handler, indent=4)

        return config


    # normal path
    config = {}
    if not os.path.exists(config_folder):
        os.makedirs(config_folder)

    if os.path.exists(config_file):
        with open(config_file, "r") as handler:
            config = json.load(handler)
    else:
        config = config_template

    tool_config_path = config["xtools"]["list_path"]
    if os.path.exists(tool_config_path):
        with open(tool_config_path, "r") as handler:
            tool_config = json.load(handler)

            arch = config["xtools"]["arch"]

            for item in arch:
                toollist = "%s_toollist" % item
                toolpath = "%s_toolpath" % item

                config["xtools"][toollist] = tool_config["xtools"][toollist]
                if not config["xtools"][toolpath]:
                    config["xtools"][toolpath] = tool_config["xtools"][toolpath]

    with open(config_file, "w") as handler:
        json.dump(config, handler, indent=4)


    return config


def run(cmd_opts):
    """ main body """

    config = setup_config()

    all_tools = []
    for arch in config["xtools"]["arch"]:
        for key, val in config["xtools"].items():
            if key == arch:
                all_tools += val["toollist"]

    if cmd_opts.listall:
        xtools = search_xtool(all_tools)
        if not xtools:
            print "no available xtool"
        else:
            show_xtool_info(xtools)

        sys.exit(0)

    if cmd_opts.current:
        for arch in config["xtools"]["arch"]:
            for key, val in config["xtools"].items():
                if key == arch:
                    target = [val["toolpath"], ]
                    xtools = search_xtool(target)
                    show_xtool_info(xtools)

        sys.exit(0)

    if cmd_opts.dryrun or cmd_opts.override or not cmd_opts.override:
        xtools = search_xtool(all_tools)
        show_xtool_info(xtools)
        choice = get_choice(xtools)
        update = False

        if choice:
            choice = int(choice) - 1
            path = sorted(xtools.keys(), key=lambda x: xtools[x]['gcc']['version'])[choice]

            basename = os.path.basename(path)
            arch = ""
            for key in config["xtools"]["arch"]:
                if key in basename:
                    arch = key
                    break
            else:
                print "unknown arch '%s'" % (arch)
                sys.exit(1)

            if cmd_opts.dryrun:
                print "just try run. setup this %s" % (path)
            elif cmd_opts.override:
                config["xtools"][arch]["toolpath"] = path
                update = True

                print "overrite success"
            else:
                tmppath = config["xtools"][arch]["tmp"]
                if not tmppath or not os.path.exists(tmppath):
                    tmpfp, tmppath = tempfile.mkstemp()
                    tmpfp = os.fdopen(tmpfp, "w")
                else:
                    tmpfp = open(tmppath, "w")
                    tmpfp.seek(0, 2)

                tmpfp.write(path + "\n")
                config["xtools"][arch]["tmp"] = tmppath
                tmpfp.close()
                update = True

            if update:
                setup_config(config)

        sys.exit(0)


    #should not be here
    print "unknown error"
    sys.exit(1)


if __name__ == "__main__":
    CMD_OPTS = parse_argv()
    run(CMD_OPTS)


